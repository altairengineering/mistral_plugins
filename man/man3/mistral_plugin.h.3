.TH """mistral_plugin.h""" 3 2016-06-17 Ellexus "Mistral Plug-in Programmer's Manual"
.SH NAME
mistral_plugin.h \- Plug-in development framework
.SH SYNOPSIS
.B #include """mistral_plugin.h"""
.SH DESCRIPTION
The \fI"mistral_plugin.h"\fP header shall declare the structure
\fBmistral_plugin\fP, which shall include at least the following
members:
.sp
.RS
.nf

\fBuint64_t                   \fPinterval;
\fBenum mistral_plugin_type   \fPtype;
\fBFILE                      *\fPerror_log;
.fi
.RE
.LP
The \fBinterval\fP value will contain the period in seconds Mistral will
wait between calls to an update plug-in. This value will be zero in
output plug-ins.
.LP
The \fBtype\fP must be set to one of the following positive integer
constants in \fBmistral_start\fP (see below):
.RS
.TP 7
\fBOUTPUT_PLUGIN\fP
Indicates this plug-in is operating as an output plug-in.
.TP 7
\fBUPDATE_PLUGIN\fP
Indicates this plug-in is operating as an update plug-in.
.RE
.sp
.LP
The \fBerror_log\fP pointer will be set to the file stream to use for
error messages.
By default this will be set to \fIstderr\fP
.LP
The \fI"mistral_plugin.h"\fP header shall also declare the structure
\fBmistral_log\fP, which shall include at least the following members:
.sp
.RS
.nf

\fBstruct mistral_log       *\fPforward;
\fBstruct mistral_log       *\fPbackward;
\fBenum mistral_contract     \fPcontract_type;
\fBenum mistral_scope        \fPscope;
\fBstruct tm                 \fPtime;
\fBstruct timespec           \fPepoch;
\fBconst char               *\fPlabel;
\fBconst char               *\fPpath;
\fBuint32_t                  \fPcall_type_mask;
\fBbool                      \fPcall_types[];
\fBconst char               *\fPsize_range;
\fBuint64_t                  \fPsize_min;
\fBenum mistral_unit         \fPsize_min_unit;
\fBuint64_t                  \fPsize_max;
\fBenum mistral_unit         \fPsize_max_unit;
\fBenum mistral_measurement  \fPmeasurement;
\fBconst char               *\fPthreshold_str;
\fBuint64_t                  \fPthreshold;
\fBenum mistral_unit         \fPthreshold_unit;
\fBuint64_t                  \fPtimeframe;
\fBenum mistral_unit         \fPtimeframe_unit;
\fBconst char               *\fPmeasured_str;
\fBuint64_t                  \fPmeasured;
\fBenum mistral_unit         \fPmeasured_unit;
\fBuint64_t                  \fPmeasured_time;
\fBenum mistral_unit         \fPmeasured_time_unit;
\fBint64_t                   \fPpid;
\fBconst char               *\fPcommand;
\fBconst char               *\fPfile;
\fBconst char               *\fPjob_group_id;
\fBconst char               *\fPjob_id;
\fBconst char               *\fPhostname;
\fBconst char               *\fPfull_hostname;
\fBuint32_t                  \fPcpu;
\fBint32_t                   \fPmpi_rank;
.fi
.RE
.LP
The \fBforward\fP and \fBbackward\fP pointers are provided for
compatiblity with the \fIinsque\fP() and \fIremque\fP() functions or
other linked list implementations.
These values will be set to \fBNULL\fP by \fIplugin_control.o\fP.
.LP
The \fBcontract_type\fP will be set to one of the following positive
integer constants:
.RS
.TP 7
\fBCONTRACT_MONITORING\fP
Indicates this log entry was generated by violation of a monitoring
contract rule.
.TP 7
\fBCONTRACT_THROTTLING\fP
Indicates this log entry was generated by violation of a throttling
contract rule.
.RE
.sp
.LP
The following constant character arrays containing \fICONTRACT_MAX\fP
entries relating to the \fBcontract_type\fP and a trailing \fINULL\fP
pointer will also be defined:
.sp
.RS
.nf
\fBextern const char *const \fPmistral_contract_name[];
\fBextern const char *const \fPmistral_contract_header[];
.fi
.RE
.sp
.LP
Entries in both arrays can be addressed using the value of
\fBcontract_type\fP.
.LP
The \fBmistral_contract_name\fP array contains the contract type in the
format used by a Mistral output plug-in log entry.
.LP
The \fBmistral_contract_header\fP array contains the contract type in
the format used by a Mistral contract header line.
.LP
.LP
The \fBscope\fP will be set to one of the following positive integer
constants:
.RS
.TP 7
\fBSCOPE_LOCAL\fP
Indicates this log entry was generated by violation of a "local"
contract rule.
.TP 7
\fBSCOPE_GLOBAL\fP
Indicates this log entry was generated by violation of a "global"
contract rule.
.RE
.sp
.LP
The following constant character array containing \fISCOPE_MAX\fP
entries relating to the \fBscope\fP and a trailing \fINULL\fP pointer
will also be defined:
.sp
.RS
.nf
\fBextern const char *const \fPmistral_scope_name[];
.fi
.RE
.sp
.LP
Entries in the array can be addressed using the value of \fBscope\fP.
.LP
The \fBmistral_scope_name\fP array contains the contract scope in the
format used by a Mistral output plug-in log entry.
.LP
The \fBtime\fP and \fBepoch\fP structures will be set to the time
this log entry was generated.
The \fItv_nsec\fP element of \fBepoch\fP will always be zero as Mistral
currently only logs to a precision of one second.
.LP
The \fBlabel\fP will be set to point at a string containing the label of
the violated rule.
.LP
The \fBpath\fP will be set to point at a string containing the path
being monitored by the violated rule.
.LP
The \fBcall_type_mask\fP and \fBcall_types\fP array will be set to a
represent the call types being monitored by the violated rule.
.LP
The \fBcall_types\fP array will contain \fICALL_TYPE_MAX\fP entries
which can be addressed using the following positive integer constants:
.RS
.TP 7
\fBCALL_TYPE_ACCEPT\fP
Indicates monitoring of \fIaccept()\fP and other related function calls.
.TP 7
\fBCALL_TYPE_ACCESS\fP
Indicates monitoring of \fIaccess()\fP and other related function calls.
.TP 7
\fBCALL_TYPE_CONNECT\fP
Indicates monitoring of \fIconnect()\fP and other related function
calls.
.TP 7
\fBCALL_TYPE_CREATE\fP
Indicates monitoring of \fIcreate()\fP and other related function calls.
.TP 7
\fBCALL_TYPE_DELETE\fP
Indicates monitoring of \fIdelete()\fP and other related function calls.
.TP 7
\fBCALL_TYPE_FSCHANGE\fP
Indicates monitoring of \fIchmod()\fP, \fIrename()\fP and other related
function calls.
.TP 7
\fBCALL_TYPE_GLOB\fP
Indicates monitoring of \fIglob()\fP and other related function calls.
.TP 7
\fBCALL_TYPE_MPI_ACCESS\fP
Indicates monitoring of \fIMPI_File_get_amode()\fP,
\fIMPI_File_get_size()\fP and other related function calls.
.TP 7
\fBCALL_TYPE_MPI_CREATE\fP
Indicates monitoring of \fIMPI_File_open()\fP function calls with mode
\fBMPI_MODE_CREATE\fP.
.TP 7
\fBCALL_TYPE_MPI_DELETE\fP
Indicates monitoring of \fIMPI_File_delete()\fP calls.
.TP 7
\fBCALL_TYPE_MPI_FSCHANGE\fP
Indicates monitoring of \fIMPI_File_set_atomicity()\fP,
\fIMPI_File_set_size()\fP and other related function calls.
.TP 7
\fBCALL_TYPE_MPI_OPEN\fP
Indicates monitoring of \fIMPI_File_open()\fP function calls without
mode \fBMPI_MODE_CREATE\fP.
.TP 7
\fBCALL_TYPE_MPI_READ\fP
Indicates monitoring of \fIMPI_File_read()\fP and other related
function calls.
.TP 7
\fBCALL_TYPE_MPI_SEEK\fP
Indicates monitoring of \fIMPI_File_seek()\fP,
\fIMPI_File_seek_shared()\fP function calls.
.TP 7
\fBCALL_TYPE_MPI_SYNC\fP
Indicates monitoring of \fIMPI_File_sync()\fP function calls.
.TP 7
\fBCALL_TYPE_MPI_WRITE\fP
Indicates monitoring of \fIMPI_File_write()\fP and other related
function calls.
.TP 7
\fBCALL_TYPE_OPEN\fP
Indicates monitoring of \fIopen()\fP and other related function calls.
.TP 7
\fBCALL_TYPE_READ\fP
Indicates monitoring of \fIread()\fP and other related function calls.
.TP 7
\fBCALL_TYPE_SEEK\fP
Indicates monitoring of \fIseek()\fP and other related function calls.
.TP 7
\fBCALL_TYPE_WRITE\fP
Indicates monitoring of \fIwrite()\fP and other related function calls.
.RE
.sp
.LP
The value of the associated \fBcall_types\fP array entry will be set to
\fItrue\fP if the violated rule was concerned with that call type.
.LP
In addition the following constant arrays containing
\fICALL_TYPE_MAX\fP entries will also be defined:
.sp
.RS
.nf
\fBextern const char *const \fPmistral_call_type_name[];
\fBextern const uint32_t    \fPmistral_call_type_mask[];
.fi
.RE
.sp
.LP
Entries in both arrays can be addressed using the same integer call
type constants defined above.
.LP
The \fBmistral_call_type_name\fP array contains the call type in the
format used by a Mistral output plug-in log entry. This array also
contains a trailing \fINULL\fP pointer.
.LP
The \fBmistral_call_type_mask\fP array contains an integer bitmask value
related to the call type.
The \fBcall_type_mask\fP value is produced as an OR of one or more of
these bitmask values representing the entire set of call types the
violated rule was concerned with.
.LP
Corresponding bit mask values for all defined \fBCALL_TYPE_x\fP
constants are also defined and named \fBCALL_TYPE_MASK_x\fP i.e. the bit
mask for \fBCALL_TYPE_READ\fP is defined as \fBCALL_TYPE_MASK_READ\fP.
The macro \fBBITMASK\fP() can be used to generate the appropriate bit
mask value from an arbitrary call type i.e.
.sp
.RS
.nf
\fBBITMASK\fP(\fICALL_TYPE_READ\fP) == \fICALL_TYPE_MASK_READ\fP
.fi
.RE
.sp
.LP
.LP
The following constant character array containing
\fICALL_TYPE_MASK_MAX\fP entries and a trailing \fINULL\fP pointer will
also be defined:
.sp
.RS
.nf
\fBextern const char \fPmistral_call_type_names[CALL_TYPE_MASK_MAX][];
.fi
.RE
.sp
.LP
This array can be addressed with the value of \fBcall_type_mask\fP and
will contain the string representing the entire set of call types the
violated rule was concerned with, in the format used by a Mistral output
plug-in log entry.
.LP
The element \fBsize_range\fP will be set to point at a string containing the
raw string representation of the operation size range being monitored by the
rule that was breached.
.LP
The element \fBsize_min\fP contains the lower bound of the operation
size range in bytes that the violated rule was interested in.
This value will be initialized to zero.
This constraint is only applied to read, seek and write call types.
.LP
The element \fBsize_max\fP contains the upper bound of the operation
size range in bytes that the violated rule was interested in.
This value will be initialized to \fBmistral_max_size\fP, which will be
declared as follows:
.sp
.RS
.nf
\fBextern const int64_t \fPmistral_max_size;
.fi
.RE
.LP
This constant represents the special case "no upper bound".
Operation size range constraints are only applied to \fIread\fP,
\fIseek\fP and \fIwrite\fP call types.
.LP
The \fBsize_min_unit\fP and \fBsize_max_unit\fP elements will be set to
one of the following positive integer constants:
.RS
.TP 7
\fBUNIT_BYTES\fP
Indicates this log entry reported the size value for the violated
contract rule in bytes.
.TP 7
\fBUNIT_KILOBYTES\fP
Indicates this log entry reported the size value for the violated
contract rule in kilobytes.
.TP 7
\fBUNIT_MEGABYTES\fP
Indicates this log entry reported the size value for the violated
contract rule in megabytes.
.TP 7
\fBUNIT_GIGABYTES\fP
Indicates this log entry reported the size value for the violated
contract rule in gigabytes.
.RE
.sp
.LP
The \fBmeasurement\fP will be set to one of the following positive
integer constants:
.RS
.TP 7
\fBMEASUREMENT_BANDWIDTH\fP
Indicates this log entry was generated by violation of a bandwidth
contract rule.
.TP 7
\fBMEASUREMENT_COUNT\fP
Indicates this log entry was generated by violation of a count contract
rule.
.TP 7
\fBMEASUREMENT_SEEK_DISTANCE\fP
Indicates this log entry was generated by violation of a seek-distance
contract rule.
.TP 7
\fBMEASUREMENT_MIN_LATENCY\fP
Indicates this log entry was generated by violation of a min-latency
contract rule.
.TP 7
\fBMEASUREMENT_MAX_LATENCY\fP
Indicates this log entry was generated by violation of a max-latency
contract rule.
.TP 7
\fBMEASUREMENT_MEAN_LATENCY\fP
Indicates this log entry was generated by violation of a mean-latency
contract rule.
.TP 7
\fBMEASUREMENT_TOTAL_LATENCY\fP
Indicates this log entry was generated by violation of a total-latency
contract rule.
.RE
.sp
.LP
The element \fBthreshold_str\fP will be set to point at a string
containing the raw string representation of the threshold of operations
allowed that was breached as defined by the violated rule.
.LP
The element \fBthreshold\fP contains the threshold of operations allowed
that was breached by the violated rule.
This value will be bytes for \fIbandwidth\fP and \fIseek-distance\fP
rules, microseconds for \fImin-latency\fP, \fImax-latency\fP,
\fImean-latency\fP and \fItotal-latency\fP rules and a raw count for
\fIcount\fP rules.
.LP
The \fBthreshold_unit\fP element will be set to one of the following
positive integer constants:
.RS
.TP 7
\fBUNIT_BYTES\fP
Indicates this log entry reported the threshold for the violated
contract rule in bytes.
This value is only valid for \fIbandwidth\fP and \fIseek-distance\fP
rules.
.TP 7
\fBUNIT_KILOBYTES\fP
Indicates this log entry reported the threshold for the violated
contract rule in kilobytes.
This value is only valid for \fIbandwidth\fP and \fIseek-distance\fP
rules.
.TP 7
\fBUNIT_MEGABYTES\fP
Indicates this log entry reported the threshold for the violated
contract rule in megabytes.
This value is only valid for \fIbandwidth\fP and \fIseek-distance\fP
rules.
.TP 7
\fBUNIT_GIGABYTES\fP
Indicates this log entry reported the threshold for the violated
contract rule in gigabytes.
This value is only valid for \fIbandwidth\fP and \fIseek-distance\fP
rules.
.TP 7
\fBUNIT_MICROSECS\fP
Indicates this log entry reported the threshold for the violated
contract rule in microseconds.
This value is only valid for \fImin-latency\fP, \fImax-latency\fP,
\fImean-latency\fP and \fItotal-latency\fP rules.
.TP 7
\fBUNIT_MILLISECS\fP
Indicates this log entry reported the threshold for the violated
contract rule in milliseconds.
This value is only valid for \fImin-latency\fP, \fImax-latency\fP,
\fImean-latency\fP and \fItotal-latency\fP rules.
.TP 7
\fBUNIT_SECONDS\fP
Indicates this log entry reported the threshold for the violated
contract rule in seconds.
This value is only valid for \fImin-latency\fP, \fImax-latency\fP,
\fImean-latency\fP and \fItotal-latency\fP rules.
.TP 7
\fBUNIT_COUNT\fP
Indicates this log entry reported the threshold for the violated
contract rule as a raw count.
This value is only valid for \fIcount\fP rules.
.TP 7
\fBUNIT_THOUSAND\fP
Indicates this log entry reported the threshold for the violated
contract rule in thousands.
This value is only valid for \fIcount\fP rules.
.TP 7
\fBUNIT_MILLION\fP
Indicates this log entry reported the threshold for the violated
contract rule in millions.
This value is only valid for \fIcount\fP rules.
.RE
.sp
.LP
In addition the following constant arrays containing \fIUNIT_MAX\fP
entries will also be defined:
.sp
.RS
.nf
\fBextern const char *const \fPmistral_unit_suffix[];
\fBextern const uint32_t    \fPmistral_unit_scale[];
\fBextern const uint32_t    \fPmistral_unit_type[];
.fi
.RE
.sp
.LP
Entries in all three arrays can be addressed using the same integer unit
type constants defined above.
.LP
The \fBmistral_unit_suffix\fP array contains the unit suffix in the
format used by a Mistral output plug-in log entry. This array also
contains a trailing \fINULL\fP pointer.
.LP
The \fBmistral_unit_scale\fP array contains the scalar value that is
needed to convert this unit to or from the base unit e.g.
\fBmistral_unit_scale\fP[\fIUNIT_KILOBYTES\fP] == 1000.
.LP
The \fBmistral_unit_type\fP array will be set to one of the following
positive integer constants:
.RS
.TP 7
\fBUNIT_CLASS_TIME\fP
Indicates this unit is one of \fIUNIT_SECONDS\fP, \fIUNIT_MILLISECS\fP
or \fIUNIT_MICROSECS\fP.
.TP 7
\fBUNIT_CLASS_SIZE\fP
Indicates this unit is one of \fIUNIT_BYTES\fP, \fIUNIT_KILOBYTES\fP,
\fIUNIT_MEGABYTES\fP or \fIUNIT_GIGABYTES\fP.
.TP 7
\fBUNIT_CLASS_COUNT\fP
Indicates this unit is one of \fIUNIT_COUNT\fP, \fIUNIT_THOUSAND\fP
or \fIUNIT_MILLION\fP.
.RE
.sp
.LP
The \fBtimeframe\fP will be set to the length of time in microseconds
the Mistral accumulated statistics for the violated rule.
.LP
The \fBtimeframe_unit\fP element will be set to one of the following
positive integer constants:
.RS
.TP 7
\fBUNIT_MICROSECS\fP
Indicates this log entry reported the timeframe for the violated
contract rule in microseconds.
.TP 7
\fBUNIT_MILLISECS\fP
Indicates this log entry reported the timeframe for the violated
contract rule in milliseconds.
.TP 7
\fBUNIT_SECONDS\fP
Indicates this log entry reported the timeframe for the violated
contract rule in seconds.
.RE
.sp
.LP
The element \fBmeasured_str\fP will be set to point at a string
containing the raw string representation of the accumulated total of
operation measurements observed that violated the rule.
.LP
The \fBmeasured\fP element contains the accumulated total of operation
measurements observed that violated the rule.
This value will be bytes for \fIbandwidth\fP and \fIseek-distance\fP
rules, microseconds for \fImin-latency\fP, \fImax-latency\fP,
\fImean-latency\fP and \fItotal-latency\fP rules and a raw count for
\fIcount\fP rules.
.LP
The \fBmeasured_unit\fP element will be set to one of the same positive
integer constants as the \fBthreshold_unit\fP above to indicate how the
\fBmeasured\fP value was reported.
.LP
The \fBmeasured_time\fP will be set to the actual length of time in
microseconds that Mistral accumulated statistics for the violated rule.
This will normally be equal to the value in \fBtimeframe\fP.
.LP
The \fBmeasured_time_unit\fP element will be set to one of the same
positive integer constants as \fBtimeframe_unit\fP to indicate how the
\fBmeasured_time\fP value was reported.
.LP
The \fBpid\fP will be set to the process ID of the process that
contributed the most to the violation of the rule.
.LP
The \fBcommand\fP will be set to point at a string containing the
command line of the process that contributed the most to the violation
of the rule.
The command will be truncated at 1405 characters.
.LP
The \fBfile\fP will be set to point at a string containing the canonical
name of the file that was accessed by the I/O operation that first
exceeded the defined \fBthreshold\fP value.
.LP
The \fBjob_group_id\fP will be set to point at a string containing the
job group identifier for the job group that violated the rule.
.LP
The \fBjob_id\fP will be set to point at a string containing the
job identifier for the job that violated the rule.
.LP
The \fBhostname\fP element will be set to point at a string containing
the name of the execution host the job was running on with any domain
component removed.
.LP
The \fBfull_hostname\fP element will be set to point at a string
containing the fully qualified name of the execution host the job was
running on.
.LP
The \fBcpu\fP element will be set to the CPU number the process that
contributed the most to the violation of the rule was running on when
it last performed qualifying I/O.
.LP
The \fBmpi_rank\fP element will be set to the MPI rank number of the
process that contributed the most to the violation of the rule.
.LP
The following shall be declared as a variable:
.sp
.RS
.nf
\fBextern bool \fPmistral_shutdown;
.fi
.RE
.LP
If \fBmistral_shutdown\fP set to \fItrue\fP the plug-in will exit
cleanly before reading any more input.
.LP
The following shall be declared as functions.
Function prototypes shall be provided.
.sp
.RS
.nf
\fB
extern void mistral_destroy_log_entry(mistral_log *log_entry);

extern int mistral_err(const char *format, ...);

void mistral_startup(mistral_plugin *plugin, int argc, char *argv[]);

void mistral_received_interval(mistral_plugin *plugin) __attribute__((weak));

void mistral_received_data_start(uint64_t block_num, bool block_error) __attribute__((weak));

void mistral_received_data_end(uint64_t block_num, bool block_error) __attribute__((weak));

void mistral_received_shutdown(void) __attribute__((weak));

void mistral_received_log(mistral_log *log_entry) __attribute__((weak));

void mistral_received_bad_log(const char *log_line) __attribute__((weak));

void mistral_exit(void) __attribute__((weak));
\fP
.fi
.RE
.sp
.LP
Inclusion of the \fI"mistral_plugin.h\fP header may make visible all
symbols from the \fI<stdbool.h>\fP, \fI<stdint.h>\fP, \fI<stdio.h>\fP,
\fI<sys/types.h>\fP and \fI<time.h>\fP, headers.
.LP
\fIThe following sections are informative.\fP
.SH NOTES
Any files that include this header must be compiled with \fBgcc\fP or
another compiler that is compatible with the
\fB__attribute__((packed))\fP and \fB__attribute__((weak))\fP notation.
.SH SEE ALSO
.LP
\fI<stdbool.h>\fP, \fI<stdint.h>\fP, \fI<stdio.h>\fP,
\fI<sys/types.h>\fP, \fI<time.h>\fP, \fIinsque\fP(3), \fIremque\fP(3),
\fImistral_destroy_log_entry\fP(3), \fImistral_err\fP(3),
\fImistral_startup\fP(3), \fImistral_received_interval\fP(3),
\fImistral_received_data_start\fP(3),
\fImistral_received_data_end\fP(3), \fImistral_received_shutdown\fP(3),
\fImistral_received_log\fP(3), \fImistral_received_bad_log\fP(3),
\fImistral_exit\fP(3)


